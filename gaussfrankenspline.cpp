// Code generated by Stan version 2.5

#include <stan/model/model_header.hpp>
#include <stan/common/command.hpp>

namespace gaussfrankenspline_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
using namespace stan::prob;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

template <typename T0__, typename T1__>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
sq_distance(const T0__& x,
                const T1__& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    return stan::math::promote_scalar<fun_return_scalar_t__>(square((x - y)));
}


struct sq_distance_functor__ {
template <typename T0__, typename T1__>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
operator()(const T0__& x,
                const T1__& y, std::ostream* pstream__) const {
    return sq_distance(x, y, pstream__);
}
};

template <typename T0__, typename T1__>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
distance(const T0__& x,
             const T1__& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    return stan::math::promote_scalar<fun_return_scalar_t__>(fabs((x - y)));
}


struct distance_functor__ {
template <typename T0__, typename T1__>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
operator()(const T0__& x,
             const T1__& y, std::ostream* pstream__) const {
    return distance(x, y, pstream__);
}
};

template <typename T0__, typename T1__>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
sq_circ_distance(const T0__& x,
                     const T1__& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    {
        fun_scalar_t__ d;
        (void) d;   // dummy to suppress unused var warning
        stan::math::initialize(d, std::numeric_limits<double>::quiet_NaN());
        stan::math::assign(d, fabs((x - y)));
        return stan::math::promote_scalar<fun_return_scalar_t__>(square(fmin(d,((2 * pi()) - d))));
    }
}


struct sq_circ_distance_functor__ {
template <typename T0__, typename T1__>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
operator()(const T0__& x,
                     const T1__& y, std::ostream* pstream__) const {
    return sq_circ_distance(x, y, pstream__);
}
};

template <typename T0__, typename T1__>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
circ_distance(const T0__& x,
                  const T1__& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    {
        fun_scalar_t__ d;
        (void) d;   // dummy to suppress unused var warning
        stan::math::initialize(d, std::numeric_limits<double>::quiet_NaN());
        stan::math::assign(d, fabs((x - y)));
        return stan::math::promote_scalar<fun_return_scalar_t__>(fmin(d,((2 * pi()) - d)));
    }
}


struct circ_distance_functor__ {
template <typename T0__, typename T1__>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
operator()(const T0__& x,
                  const T1__& y, std::ostream* pstream__) const {
    return circ_distance(x, y, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
gp_generalized_sq_exp(const T0__& eta_sq,
                          const T1__& rho_sq,
                          const T2__& sigma_sq,
                          const Eigen::Matrix<T3__, Eigen::Dynamic,1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    {
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Sigma(get_base1(dims(x),1,"dims(x)",1),get_base1(dims(x),1,"dims(x)",1));
        (void) Sigma;   // dummy to suppress unused var warning
        stan::math::initialize(Sigma, std::numeric_limits<double>::quiet_NaN());
        for (int i = 1; i <= get_base1(dims(x),1,"dims(x)",1); ++i) {
            for (int j = i; j <= get_base1(dims(x),1,"dims(x)",1); ++j) {
                stan::math::assign(get_base1_lhs(Sigma,i,j,"Sigma",1), (eta_sq * exp((-(rho_sq) * sq_distance(get_base1(x,i,"x",1),get_base1(x,j,"x",1), pstream__)))));
                stan::math::assign(get_base1_lhs(Sigma,j,i,"Sigma",1), get_base1(Sigma,i,j,"Sigma",1));
            }
        }
        for (int k = 1; k <= get_base1(dims(x),1,"dims(x)",1); ++k) {
            stan::math::assign(get_base1_lhs(Sigma,k,k,"Sigma",1), (eta_sq + sigma_sq));
        }
        return stan::math::promote_scalar<fun_return_scalar_t__>(Sigma);
    }
}


struct gp_generalized_sq_exp_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
operator()(const T0__& eta_sq,
                          const T1__& rho_sq,
                          const T2__& sigma_sq,
                          const Eigen::Matrix<T3__, Eigen::Dynamic,1>& x, std::ostream* pstream__) const {
    return gp_generalized_sq_exp(eta_sq, rho_sq, sigma_sq, x, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
gp_circ_generalized_sq_exp(const T0__& eta_sq,
                               const T1__& rho_sq,
                               const T2__& sigma_sq,
                               const Eigen::Matrix<T3__, Eigen::Dynamic,1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    {
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Sigma(get_base1(dims(x),1,"dims(x)",1),get_base1(dims(x),1,"dims(x)",1));
        (void) Sigma;   // dummy to suppress unused var warning
        stan::math::initialize(Sigma, std::numeric_limits<double>::quiet_NaN());
        for (int i = 1; i <= get_base1(dims(x),1,"dims(x)",1); ++i) {
            for (int j = i; j <= get_base1(dims(x),1,"dims(x)",1); ++j) {
                stan::math::assign(get_base1_lhs(Sigma,i,j,"Sigma",1), (eta_sq * exp((-(rho_sq) * sq_circ_distance(get_base1(x,i,"x",1),get_base1(x,j,"x",1), pstream__)))));
                stan::math::assign(get_base1_lhs(Sigma,j,i,"Sigma",1), get_base1(Sigma,i,j,"Sigma",1));
            }
        }
        for (int k = 1; k <= get_base1(dims(x),1,"dims(x)",1); ++k) {
            stan::math::assign(get_base1_lhs(Sigma,k,k,"Sigma",1), (eta_sq + sigma_sq));
        }
        return stan::math::promote_scalar<fun_return_scalar_t__>(Sigma);
    }
}


struct gp_circ_generalized_sq_exp_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
operator()(const T0__& eta_sq,
                               const T1__& rho_sq,
                               const T2__& sigma_sq,
                               const Eigen::Matrix<T3__, Eigen::Dynamic,1>& x, std::ostream* pstream__) const {
    return gp_circ_generalized_sq_exp(eta_sq, rho_sq, sigma_sq, x, pstream__);
}
};

template <typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic,1>
make_knots(const int& n_knots,
               const T1__& lower_knot,
               const T2__& upper_knot, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    {
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  knots(n_knots);
        (void) knots;   // dummy to suppress unused var warning
        fun_scalar_t__ interknot_length;
        (void) interknot_length;   // dummy to suppress unused var warning
        stan::math::initialize(knots, std::numeric_limits<double>::quiet_NaN());
        stan::math::initialize(interknot_length, std::numeric_limits<double>::quiet_NaN());
        stan::math::assign(interknot_length, ((upper_knot - lower_knot) / (n_knots - 1)));
        if (as_bool(logical_gt(n_knots,1))) {
            for (int i = 1; i <= n_knots; ++i) {
                stan::math::assign(get_base1_lhs(knots,i,"knots",1), (interknot_length * (i - 1)));
            }
        } else {
            stan::math::assign(get_base1_lhs(knots,1,"knots",1), ((upper_knot - lower_knot) / 2.0));
        }
        if (as_bool(logical_lt(n_knots,1))) {
            if (pstream__) {
                stan_print(pstream__,"\'n_knots\' < 1 is non-sensical. Assumed 1 knot.");
                *pstream__ << std::endl;
            }
        }
        return stan::math::promote_scalar<fun_return_scalar_t__>(knots);
    }
}


struct make_knots_functor__ {
template <typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic,1>
operator()(const int& n_knots,
               const T1__& lower_knot,
               const T2__& upper_knot, std::ostream* pstream__) const {
    return make_knots(n_knots, lower_knot, upper_knot, pstream__);
}
};

inline
Eigen::Matrix<double, Eigen::Dynamic,1>
make_circle_knots(const int& n_knots, std::ostream* pstream__) {
    typedef double fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    {
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  knots(n_knots);
        (void) knots;   // dummy to suppress unused var warning
        stan::math::initialize(knots, std::numeric_limits<double>::quiet_NaN());
        if (as_bool(logical_gt(n_knots,1))) {
            for (int i = 1; i <= n_knots; ++i) {
                stan::math::assign(get_base1_lhs(knots,i,"knots",1), (((2.0 * pi()) / n_knots) * (i - 1)));
            }
        } else {
            stan::math::assign(get_base1_lhs(knots,1,"knots",1), 0);
        }
        if (as_bool(logical_lt(n_knots,1))) {
            if (pstream__) {
                stan_print(pstream__,"\'n_knots\' < 1 is non-sensical. Assumed 1 knot.");
                *pstream__ << std::endl;
            }
        }
        return stan::math::promote_scalar<fun_return_scalar_t__>(knots);
    }
}


struct make_circle_knots_functor__ {
inline
Eigen::Matrix<double, Eigen::Dynamic,1>
operator()(const int& n_knots, std::ostream* pstream__) const {
    return make_circle_knots(n_knots, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
spline(const T0__& x,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& knot_points,
           const Eigen::Matrix<T2__, Eigen::Dynamic,1>& knot_weights,
           const T3__& knot_scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    {
        fun_scalar_t__ y;
        (void) y;   // dummy to suppress unused var warning
        int J(0);
        (void) J;   // dummy to suppress unused var warning
        stan::math::initialize(y, std::numeric_limits<double>::quiet_NaN());
        stan::math::assign(y, 0.0);
        stan::math::assign(J, get_base1(dims(knot_points),1,"dims(knot_points)",1));
        for (int j = 1; j <= J; ++j) {
            stan::math::assign(y, (y + (get_base1(knot_weights,j,"knot_weights",1) * normal_log(x,get_base1(knot_points,j,"knot_points",1),knot_scale))));
        }
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
    }
}


struct spline_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
operator()(const T0__& x,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& knot_points,
           const Eigen::Matrix<T2__, Eigen::Dynamic,1>& knot_weights,
           const T3__& knot_scale, std::ostream* pstream__) const {
    return spline(x, knot_points, knot_weights, knot_scale, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
circular_spline(const T0__& theta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& knot_points,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& knot_weights,
                    const T3__& knot_scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    {
        fun_scalar_t__ y;
        (void) y;   // dummy to suppress unused var warning
        int J(0);
        (void) J;   // dummy to suppress unused var warning
        stan::math::initialize(y, std::numeric_limits<double>::quiet_NaN());
        stan::math::assign(y, 0.0);
        stan::math::assign(J, get_base1(dims(knot_points),1,"dims(knot_points)",1));
        for (int j = 1; j <= J; ++j) {
            stan::math::assign(y, (y + (((get_base1(knot_weights,j,"knot_weights",1) * 1) / (knot_scale * pow((2.0 * pi()),0.5))) * ((exp((-(square((circ_distance(theta,get_base1(knot_points,j,"knot_points",1), pstream__) + (2.0 * pi())))) / (2.0 * square(knot_scale)))) + exp((-(square(circ_distance(theta,get_base1(knot_points,j,"knot_points",1), pstream__))) / (2.0 * square(knot_scale))))) + exp((-(square((circ_distance(theta,get_base1(knot_points,j,"knot_points",1), pstream__) + (2.0 * pi())))) / (2.0 * square(knot_scale))))))));
        }
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
    }
}


struct circular_spline_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
operator()(const T0__& theta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& knot_points,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& knot_weights,
                    const T3__& knot_scale, std::ostream* pstream__) const {
    return circular_spline(theta, knot_points, knot_weights, knot_scale, pstream__);
}
};

template <typename T0__>
inline
typename boost::math::tools::promote_args<T0__>::type
day_to_angle(const T0__& day, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    {
        fun_scalar_t__ angle;
        (void) angle;   // dummy to suppress unused var warning
        stan::math::initialize(angle, std::numeric_limits<double>::quiet_NaN());
        stan::math::assign(angle, (((day / 366) * 2) * pi()));
        return stan::math::promote_scalar<fun_return_scalar_t__>(angle);
    }
}


struct day_to_angle_functor__ {
template <typename T0__>
inline
typename boost::math::tools::promote_args<T0__>::type
operator()(const T0__& day, std::ostream* pstream__) const {
    return day_to_angle(day, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
yday_circular_spline(const T0__& yday,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,1>& knot_points,
                         const Eigen::Matrix<T2__, Eigen::Dynamic,1>& knot_weights,
                         const T3__& knot_scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    {
        fun_scalar_t__ theta;
        (void) theta;   // dummy to suppress unused var warning
        fun_scalar_t__ y;
        (void) y;   // dummy to suppress unused var warning
        stan::math::initialize(theta, std::numeric_limits<double>::quiet_NaN());
        stan::math::initialize(y, std::numeric_limits<double>::quiet_NaN());
        stan::math::assign(theta, day_to_angle(yday, pstream__));
        stan::math::assign(y, circular_spline(theta,knot_points,knot_weights,knot_scale, pstream__));
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
    }
}


struct yday_circular_spline_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
operator()(const T0__& yday,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,1>& knot_points,
                         const Eigen::Matrix<T2__, Eigen::Dynamic,1>& knot_weights,
                         const T3__& knot_scale, std::ostream* pstream__) const {
    return yday_circular_spline(yday, knot_points, knot_weights, knot_scale, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
yday_circular_spline(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& yday,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,1>& knot_points,
                         const Eigen::Matrix<T2__, Eigen::Dynamic,1>& knot_weights,
                         const T3__& knot_scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    {
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  positions(num_elements(yday));
        (void) positions;   // dummy to suppress unused var warning
        stan::math::initialize(positions, std::numeric_limits<double>::quiet_NaN());
        for (int i = 1; i <= num_elements(yday); ++i) {
            stan::math::assign(get_base1_lhs(positions,i,"positions",1), yday_circular_spline(get_base1(yday,i,"yday",1),knot_points,knot_weights,knot_scale, pstream__));
        }
        return stan::math::promote_scalar<fun_return_scalar_t__>(positions);
    }
}


struct yday_circular_spline_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& yday,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,1>& knot_points,
                         const Eigen::Matrix<T2__, Eigen::Dynamic,1>& knot_weights,
                         const T3__& knot_scale, std::ostream* pstream__) const {
    return yday_circular_spline(yday, knot_points, knot_weights, knot_scale, pstream__);
}
};

class gaussfrankenspline_model : public prob_grad {
private:
    int n_points;
    vector_d positions;
    vector_d day_of_year;
    int n_knots;
    vector_d knot_points;
    double knot_scale;
public:
    gaussfrankenspline_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        static const char* function__ = "gaussfrankenspline_model_namespace::gaussfrankenspline_model(%1%)";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "n_points", "int", context__.to_vec());
        n_points = int(0);
        vals_i__ = context__.vals_i("n_points");
        pos__ = 0;
        n_points = vals_i__[pos__++];
        stan::math::validate_non_negative_index("positions", "n_points", n_points);
        positions = vector_d(n_points);
        context__.validate_dims("data initialization", "positions", "vector_d", context__.to_vec(n_points));
        vals_r__ = context__.vals_r("positions");
        pos__ = 0;
        size_t positions_i_vec_lim__ = n_points;
        for (size_t i_vec__ = 0; i_vec__ < positions_i_vec_lim__; ++i_vec__) {
            positions[i_vec__] = vals_r__[pos__++];
        }
        stan::math::validate_non_negative_index("day_of_year", "n_points", n_points);
        day_of_year = vector_d(n_points);
        context__.validate_dims("data initialization", "day_of_year", "vector_d", context__.to_vec(n_points));
        vals_r__ = context__.vals_r("day_of_year");
        pos__ = 0;
        size_t day_of_year_i_vec_lim__ = n_points;
        for (size_t i_vec__ = 0; i_vec__ < day_of_year_i_vec_lim__; ++i_vec__) {
            day_of_year[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "n_knots", "int", context__.to_vec());
        n_knots = int(0);
        vals_i__ = context__.vals_i("n_knots");
        pos__ = 0;
        n_knots = vals_i__[pos__++];

        // validate data
        try { 
            check_greater_or_equal(function__,n_points,2,"n_points", (double *)0);
        } catch (const std::exception& e) { 
            throw std::domain_error(std::string("Invalid value of n_points: ") + std::string(e.what()));
        };
        stan::math::validate_non_negative_index("knot_points", "n_knots", n_knots);
        knot_points = vector_d(n_knots);
        knot_scale = double(0);

        stan::math::assign(knot_points, make_circle_knots(n_knots, pstream__));
        stan::math::assign(knot_scale, (pi() / n_knots));

        // validate transformed data
        try { 
            check_greater_or_equal(function__,knot_scale,0.0,"knot_scale", (double *)0);
        } catch (const std::exception& e) { 
            throw std::domain_error(std::string("Invalid value of knot_scale: ") + std::string(e.what()));
        };

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        num_params_r__ += n_knots;
    }

    ~gaussfrankenspline_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;


        if (!(context__.contains_r("theta_eta_sq")))
            throw std::runtime_error("variable theta_eta_sq missing");
        vals_r__ = context__.vals_r("theta_eta_sq");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_eta_sq", "double", context__.to_vec());
        double theta_eta_sq(0);
        theta_eta_sq = vals_r__[pos__++];
        try { writer__.scalar_lb_unconstrain(0,theta_eta_sq); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable theta_eta_sq: ") + e.what()); }

        if (!(context__.contains_r("theta_rho_sq")))
            throw std::runtime_error("variable theta_rho_sq missing");
        vals_r__ = context__.vals_r("theta_rho_sq");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_rho_sq", "double", context__.to_vec());
        double theta_rho_sq(0);
        theta_rho_sq = vals_r__[pos__++];
        try { writer__.scalar_lb_unconstrain(0,theta_rho_sq); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable theta_rho_sq: ") + e.what()); }

        if (!(context__.contains_r("theta_sigma_sq")))
            throw std::runtime_error("variable theta_sigma_sq missing");
        vals_r__ = context__.vals_r("theta_sigma_sq");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_sigma_sq", "double", context__.to_vec());
        double theta_sigma_sq(0);
        theta_sigma_sq = vals_r__[pos__++];
        try { writer__.scalar_lb_unconstrain(0,theta_sigma_sq); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable theta_sigma_sq: ") + e.what()); }

        if (!(context__.contains_r("theta_mu")))
            throw std::runtime_error("variable theta_mu missing");
        vals_r__ = context__.vals_r("theta_mu");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_mu", "double", context__.to_vec());
        double theta_mu(0);
        theta_mu = vals_r__[pos__++];
        try { writer__.scalar_unconstrain(theta_mu); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable theta_mu: ") + e.what()); }

        if (!(context__.contains_r("knot_weights")))
            throw std::runtime_error("variable knot_weights missing");
        vals_r__ = context__.vals_r("knot_weights");
        pos__ = 0U;
        context__.validate_dims("initialization", "knot_weights", "vector_d", context__.to_vec(n_knots));
        vector_d knot_weights(n_knots);
        for (int j1__ = 0U; j1__ < n_knots; ++j1__)
            knot_weights(j1__) = vals_r__[pos__++];
        try { writer__.vector_unconstrain(knot_weights); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable knot_weights: ") + e.what()); }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ theta_eta_sq;
        (void) theta_eta_sq;   // dummy to suppress unused var warning
        if (jacobian__)
            theta_eta_sq = in__.scalar_lb_constrain(0,lp__);
        else
            theta_eta_sq = in__.scalar_lb_constrain(0);

        T__ theta_rho_sq;
        (void) theta_rho_sq;   // dummy to suppress unused var warning
        if (jacobian__)
            theta_rho_sq = in__.scalar_lb_constrain(0,lp__);
        else
            theta_rho_sq = in__.scalar_lb_constrain(0);

        T__ theta_sigma_sq;
        (void) theta_sigma_sq;   // dummy to suppress unused var warning
        if (jacobian__)
            theta_sigma_sq = in__.scalar_lb_constrain(0,lp__);
        else
            theta_sigma_sq = in__.scalar_lb_constrain(0);

        T__ theta_mu;
        (void) theta_mu;   // dummy to suppress unused var warning
        if (jacobian__)
            theta_mu = in__.scalar_constrain(lp__);
        else
            theta_mu = in__.scalar_constrain();

        Eigen::Matrix<T__,Eigen::Dynamic,1>  knot_weights;
        (void) knot_weights;   // dummy to suppress unused var warning
        if (jacobian__)
            knot_weights = in__.vector_constrain(n_knots,lp__);
        else
            knot_weights = in__.vector_constrain(n_knots);


        // transformed parameters

        // initialized transformed params to avoid seg fault on val access


        // validate transformed parameters

        const char* function__ = "validate transformed params %1%";
        (void) function__; // dummy to suppress unused var warning
        // model body
        {
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  theta_Sigma(n_knots,n_knots);
            (void) theta_Sigma;   // dummy to suppress unused var warning
            stan::math::fill(theta_Sigma,DUMMY_VAR__);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(n_knots);
            (void) mu;   // dummy to suppress unused var warning
            stan::math::fill(mu,DUMMY_VAR__);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  positions_mu(n_points);
            (void) positions_mu;   // dummy to suppress unused var warning
            stan::math::fill(positions_mu,DUMMY_VAR__);
            stan::math::initialize(theta_Sigma, DUMMY_VAR__);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::initialize(positions_mu, DUMMY_VAR__);
            lp_accum__.add(normal_log<propto__>(theta_mu, 0, 10));
            lp_accum__.add(cauchy_log<propto__>(theta_eta_sq, 0, 5));
            lp_accum__.add(cauchy_log<propto__>(theta_rho_sq, 0, 5));
            lp_accum__.add(cauchy_log<propto__>(theta_sigma_sq, 0, 5));
            stan::math::assign(theta_Sigma, gp_circ_generalized_sq_exp(theta_eta_sq,theta_rho_sq,theta_sigma_sq,knot_points, pstream__));
            lp_accum__.add(multi_normal_log<propto__>(knot_weights, rep_vector(theta_mu,n_knots), theta_Sigma));
            lp_accum__.add(normal_log<propto__>(positions, yday_circular_spline(day_of_year,knot_points,knot_weights,knot_scale, pstream__), 1));
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta_eta_sq");
        names__.push_back("theta_rho_sq");
        names__.push_back("theta_sigma_sq");
        names__.push_back("theta_mu");
        names__.push_back("knot_weights");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_knots);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "gaussfrankenspline_model_namespace::write_array(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double theta_eta_sq = in__.scalar_lb_constrain(0);
        double theta_rho_sq = in__.scalar_lb_constrain(0);
        double theta_sigma_sq = in__.scalar_lb_constrain(0);
        double theta_mu = in__.scalar_constrain();
        vector_d knot_weights = in__.vector_constrain(n_knots);
        vars__.push_back(theta_eta_sq);
        vars__.push_back(theta_rho_sq);
        vars__.push_back(theta_sigma_sq);
        vars__.push_back(theta_mu);
        for (int k_0__ = 0; k_0__ < n_knots; ++k_0__) {
            vars__.push_back(knot_weights[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;



        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }


    void write_csv_header(std::ostream& o__) const {
        stan::io::csv_writer writer__(o__);
        writer__.comma();
        o__ << "theta_eta_sq";
        writer__.comma();
        o__ << "theta_rho_sq";
        writer__.comma();
        o__ << "theta_sigma_sq";
        writer__.comma();
        o__ << "theta_mu";
        for (int k_0__ = 1; k_0__ <= n_knots; ++k_0__) {
            writer__.comma();
            o__ << "knot_weights" << '.' << k_0__;
        }
        writer__.newline();
    }

    template <typename RNG>
    void write_csv(RNG& base_rng__,
                   std::vector<double>& params_r__,
                   std::vector<int>& params_i__,
                   std::ostream& o__,
                   std::ostream* pstream__ = 0) const {
        stan::io::reader<double> in__(params_r__,params_i__);
        stan::io::csv_writer writer__(o__);
        static const char* function__ = "gaussfrankenspline_model_namespace::write_csv(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double theta_eta_sq = in__.scalar_lb_constrain(0);
        writer__.write(theta_eta_sq);
        double theta_rho_sq = in__.scalar_lb_constrain(0);
        writer__.write(theta_rho_sq);
        double theta_sigma_sq = in__.scalar_lb_constrain(0);
        writer__.write(theta_sigma_sq);
        double theta_mu = in__.scalar_constrain();
        writer__.write(theta_mu);
        vector_d knot_weights = in__.vector_constrain(n_knots);
        writer__.write(knot_weights);

        // declare, define and validate transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;




        // write transformed parameters

        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
        writer__.newline();
    }

    template <typename RNG>
    void write_csv(RNG& base_rng,
                   Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                   std::ostream& o,
                   std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<int> params_i_vec;  // dummy
      write_csv(base_rng, params_r_vec, params_i_vec, o, pstream);
    }

    static std::string model_name() {
        return "gaussfrankenspline_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_eta_sq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_rho_sq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_sigma_sq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_mu";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_knots; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "knot_weights" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_eta_sq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_rho_sq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_sigma_sq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_mu";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_knots; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "knot_weights" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef gaussfrankenspline_model_namespace::gaussfrankenspline_model stan_model;

